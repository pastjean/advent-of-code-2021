use std::sync::Arc;

// decoding bits rust
// |---|---|
// 3bits = version
// 3bits = type_id

// Types
// 4 = literal value

struct Packet {
    version: usize,
    t: PacketType,
}

enum PacketType {
    Literal(LiteralValue),
    Operator(OperatorPacket),
    Comparison(ComparisonPacket),
    Null,
}

struct LiteralValue(i64);

impl LiteralValue {
    pub fn parse_stream(stream: &mut impl Iterator<Item = char>) -> Self {
        LiteralValue(0)
    }
}

struct OperatorPacket {
    operator_init: i64,
    operator_fn: fn(i64, i64) -> i64,
    lhs: Arc<Packet>,
}

impl OperatorPacket {
    pub fn parse_stream(operator_init: i64, stream: &mut impl Iterator<Item = char>) -> Self {
        OperatorPacket { operator_init,
        match operator_init { 0=> ||,1=>,2=>,3=>,_=>} }
    }
}

struct ComparisonPacket {
    comparison_fn: fn(i64, i64) -> i64,
    lhs: Arc<Packet>,
    rhs: Arc<Packet>,
}

impl ComparisonPacket {
    pub fn parse_stream(stream: &mut impl Iterator<Item = char>) -> Self {
        ComparisonPacket {}
    }
}

fn parse_stream(stream: &mut impl Iterator<Item = char>) -> Packet {
    let version: usize = 0;
    let id: i64 = 0;

    let t = match id {
        0 | 1 | 2 | 3 => PacketType::Operator(OperatorPacket::parse_stream(id, stream)),
        4 => PacketType::Literal(LiteralValue::parse_stream(stream)),
        5 | 6 | 7 => PacketType::Comparison(ComparisonPacket::parse_stream(stream)),
        _ => unreachable!(),
    };

    Packet { version, t }
}

pub fn p1(input: &str) -> Result<usize, ()> {
    Ok(0)
}

pub fn p2(input: &str) -> Result<usize, ()> {
    Ok(0)
}

#[cfg(test)]
mod p1_tests {
    use super::*;

    const PROBLEM_INPUT: &str

    macro_rules! p1_tests {
        ($($name:ident: $value:expr,)*) => {
        $(
            #[test]
            fn $name() {
                let (input, expected) = $value;
                assert_eq!(expected, p1(input));
            }
        )*
        }
    }

    p1_tests! {
        p1_0: ("8A004A801A8002F478", Ok(16)),
        p1_1: ("620080001611562C8802118E34", Ok(12)),
        p1_2: ("C0015000016115A2E0802F182340", Ok(23)),
        p1_3: ("A0016C880162017C3686B18A3D4780", Ok(31)),
        p1_problem: (PROBLEM_INPUT, Ok(31)),
    }
}

#[cfg(test)]
mod p2_tests {
    use super::*;

    const PROBLEM_INPUT: &str

    macro_rules! p2_tests {
        ($($name:ident: $value:expr,)*) => {
        $(
            #[test]
            fn $name() {
                let (input, expected) = $value;
                assert_eq!(expected, p2(input));
            }
        )*
        }
    }

    p2_tests! {
        p1_0: ("8A004A801A8002F478", Ok(16)),
        p1_1: ("620080001611562C8802118E34", Ok(12)),
        p1_2: ("C0015000016115A2E0802F182340", Ok(23)),
        p1_3: ("A0016C880162017C3686B18A3D4780", Ok(31)),
        p1_problem: (PROBLEM_INPUT, Ok(31)),
    }
}
